openapi: 3.0.0
info:
  title: ContactProxyAPI
  description: API for backend part of ContactProxy
  version: "0.6"
  
servers:
  - url: http://localhost:8181/contact-proxy
    description: api server

paths:
    /authorize/login:

        post:
            tags:
            - Auth
            summary: Method to log in
            operationId: login
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserLoginRequestDTO'
                required: true
            responses:
                "200":
                    description: Successful log in
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWTResponseDTO'
                "400":
                    description: No such user found
                default:
                    description: When something went wrong
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /authorize/register:
        post:
            tags:
            - Auth
            summary: Method to register user
            operationId: register
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserRegisterRequestDTO'
                required: true
            responses:
                "200":
                    description: Successful register
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWTResponseDTO'
                "400":
                    description: This email has already been registered
                default:
                    description: When something went wrong
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /authorize/forgotPassword:
        post:
            tags:
            - Auth
            summary: Method to refresh user's password
            operationId: forgotPassword
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserRestorePasswordRequestDTO'
                required: true
            responses:
                "200":
                    description: UserEntity successfully refreshed password

                    content:
                        application/json: {}
                "400":
                    description: This password is already using
                default:
                    description: When something went wrong
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /authorize/changePassword/{user_id}:
        post:
            tags:
            - Auth
            summary: Method to refresh user's password
            operationId: changePassword
            parameters: 
            - name: user_id
              in: path
              description: UserEntity ID
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 123
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserChangePasswordRequestDTO'
                required: true
            responses:
                "200":
                    description: UserEntity successfully refreshed password

                    content:
                        application/json: 
                            schema:
                                $ref: '#/components/schemas/JWTResponseDTO'
                "400":
                    description: This password is already using
                default:
                    description: When something went wrong
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /cards/all/{user_id}:
        get:
            tags:
            - UserCards
            summary: Method to get current user's all cards
            operationId: getUsersCards
            parameters: 
            - name: user_id
              in: path
              description: UserEntity ID
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 123
            responses:
                "200":
                    description: Successful response with users all cards
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Cards'
                "204":
                    description: Current user doesn't have any cards
                    content:
                        application/json: {}
                default:
                    description: When something went wrong
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /cards/saved/{user_id}:
        get:
            tags:
            - UserCards
            summary: Method to get current user's saved cards
            operationId: getUsersSavedCards
            parameters: 
            - name: user_id
              in: path
              description: UserEntity ID
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 123
            responses:
                "200":
                    description: Successful response with users all cards
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Cards'
                "204":
                    description: Current user doesn't have any cards
                    content:
                        application/json: {}
                default:
                    description: When something went wrong
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /cards/viewed/{user_id}:
        get:
            tags:
            - UserCards
            summary: Method to get current user's history of views
            operationId: getUsersHistoryOfViews
            parameters: 
            - name: user_id
              in: path
              description: UserEntity ID
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 123
            responses:
                "200":
                    description: Successful response with users all cards
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Cards'
                "204":
                    description: Current user doesn't have any cards
                    content:
                        application/json: {}
                default:
                    description: When something went wrong
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /cards/{card_id}:
        get:
            tags:
            - Cards
            summary: Method to get card by id 
            operationId: getCardById
            parameters: 
            - name: card_id
              in: path
              description: CardEntity ID
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 12
            responses:
                "200":
                    description: Successful response with user's card
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CardDTO'
                "204":
                    description: Successful response but asking for register and/or requesting premission
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RequestedCardDTO'
                "400":
                    description: CardEntity with this id doesn't exist
                default:
                    description: When something went wrong
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /cards/{card_id}/delete:    
        delete:
            tags:
            - UserCards
            summary: Method to delete card
            operationId: deleteById
            parameters:
            - name: card_id
              in: path
              description: CardEntity id
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 12
            responses:
                "200":
                    description: Successful delete
                    content:
                        application/json: {}
                default:
                    description: When something went wrong
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /cards/{card_id}/edit:    
        put:
            tags:
            - UserCards
            summary: Method to edit card
            operationId: editById
            parameters:
            - name: card_id
              in: path
              description: CardEntity id
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 12
            responses:
                "200":
                    description: Successful editing card
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CardDTO'
                "400":
                    description: CardEntity with this id doesn't exist
                default:
                    description: When something went wrong
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /cards/{card_id}/save:
        post:
            tags:
            - UserCards
            summary: Method to save card of another user
            operationId: saveById
            parameters:
            - name: card_id
              in: path
              description: CardEntity id
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 12
            responses:
                "200":
                    description: Successful save
                    content:
                        application/json: {}
                default:
                    description: When something went wrong
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /cards/create:
        post:
            tags:
            - UserCards
            summary: Method to create new card
            operationId: createCard
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CardDTO'
                required: true
            responses:
                "200":
                  description: Successful card creation
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/CardDTO'
                default:
                  description: When something goes wrong
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/ErrorDTO'   
    /cards/viewers/{card_id}:
        get:
            tags:
            - UserCards
            summary: Method to get card view history by card id 
            operationId: getCardViewHistoryById
            parameters: 
            - name: card_id
              in: path
              description: CardEntity ID
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 12
            responses:
                "200":
                    description: Successful response with user's card
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Users'
                "400":
                    description: CardEntity with this id doesn't exist
                default:
                    description: When something went wrong
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /user/notifications/{user_id}:
        get:
            tags:
            - User
            summary: Method to get current user's all notifications
            operationId: getUsersNotifications
            parameters: 
            - name: user_id
              in: path
              description: UserEntity ID
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 123
            responses:
                "200":
                    description: Successful response with user's all notifications
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionRequests'
                "204":
                    description: Current user doesn't have any notifications
                    content:
                        application/json: {}
                default:
                    description: When something went wrong
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'
    /user/notifications/{request_id}:
        post:
            tags:
            - User
            summary: Method to answer current notifications
            operationId: answerOnNotification
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PermissionRequestDTO'
                required: true
            parameters: 
            - name: request_id
              in: path
              description: RequestEntity ID
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                example: 123
            responses:
                "200":
                    description: Successful response 
                    content: 
                        application/json: {}
                default:
                    description: When something went wrong
                    content: 
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorDTO'

components:
  schemas:
    UserRestorePasswordRequestDTO:
        required:
            - email 
        type: object
        properties: 
            email:
                type: string
                example: i.ivanov@g.nsu.ru
    UserChangePasswordRequestDTO:
        required:
            - id
            - password
        type: object
        properties: 
            id:
                type: integer
                example: 123
            password:
                type: string
                example: newPassword
    UserLoginRequestDTO:
        required:
            - email 
            - password
        type: object
        properties: 
            email:
                type: string
                example: i.ivanov@g.nsu.ru
            password:
                type: string
                example: password
    UserRegisterRequestDTO:
        required:
            - email
            - name
            - surname
            - password
        type: object
        properties: 
            email:
                type: string
                example: i.ivanov@g.nsu.ru
            name:
                type: string
                example: Ivan
            surname:
                type: string
                example: Ivanov
            password:
                type: string
                example: password
    UserDTO:
        required:
            - id
        type: object
        properties: 
            id:
                type: integer
                example: 123
            name:
                type: string
                example: Ivan
            surname:
                type: string
                example: Ivanov
            url:
                type: string
                example: id123
    Users:
        type: array
        items: 
            $ref: '#/components/schemas/UserDTO'
    RequestedCardDTO:
        required:
            - id
        type: object
        properties:
            id:
                type: integer
                example: 12
            isOnlyForAuthorizedUsers:
                type: boolean                
            isOnlyWithPermission:
                type: boolean    
    CardDTO:
        required: 
            - name
            - cardFields
            - maxViewCount
            - maxViewDate
            - isOnlyForAuthorizedUsers
            - isOnlyWithPermission
        type: object
        properties:
            id:
                type: integer
                example: 12
            ownerId:
                type: integer
                example: 123
            name:
                type: string
                example: MyCard
            cardFields:
                $ref: '#/components/schemas/CardFields'
            creationDate:
                type: string
                description: Date of card creation
                format: date-time
                example: 2021-01-30T08:30:00Z
            viewCounter:
                type: integer
                example: 10
            maxViewCount:
                type: integer
                description: Top border of view counter
                example: 15
            maxViewDate:
                type: string
                description: Top border of card existing
                format: date-time
                example: 2021-01-31T08:30:00Z
            url:
                type: string
                example: MyCardURL
            isVisible:
                type: boolean                
            isOnlyForAuthorizedUsers:
                type: boolean                
            isOnlyWithPermission:
                type: boolean                
    Cards:
        type: array
        items: 
            $ref: '#/components/schemas/CardDTO'
    CardFieldDTO:
        required:
            - cardId
            - fieldName
            - fieldData
            - cardFieldType
        type: object
        properties:
            id:
                type: integer
                example: 12
            cardId:
                type: integer
                example: 12
            fieldName:
                type: string
                description: Specific card's field name
                example: email
            fieldData:
                type: string
                example: example@email.com
            cardFieldType:
                $ref: '#/components/schemas/CardFieldTypeDTO'
    CardFields:
        type: array
        items: 
            $ref: '#/components/schemas/CardFieldDTO'
    RoleDTO:
        required:
            - name
        type: object
        properties:
            id: 
                type: integer
                example: 123
            name: 
                type: string
                example: Admin
    CardFieldTypeDTO:
        type: object
        properties:
            id:
                type: integer
                example: 123
            name:
                type: string
                example: field-name
            isCopyable:
                type: boolean
            template:
                type: string
                example: specific-template
    PermissionRequestDTO:
        required:
            - requestingUser
            - requestedCardId
        type: object
        properties:
            id:
                type: integer
                example: 1234
            requestingUser:
                $ref: '#/components/schemas/UserDTO'
            requestedCardId:
                type: integer
                example: 12
            requestDate:
                type: string
                description: Date of request creation
                format: date-time
                example: 2021-01-30T08:30:00Z 
            requestState:
                type: string
                example: accept
    PermissionRequests:
        type: array
        items:
            $ref: '#/components/schemas/PermissionRequestDTO'
    JWTResponseDTO:
        type: object
        properties:
            user:
                $ref: '#/components/schemas/UserDTO'
            role:
                $ref: '#/components/schemas/RoleDTO'
            jwt:
                type: string
                description: uniquely generated token for each user
                example: ab1cd2e.f3gh4ij5k.l6mn7op8
    ErrorDTO:
        required:
            - name
            - description
        type: object
        properties:
            name:
                type: string
                example: Bad Request!
            description:
                type: string
                example: Check input parameters